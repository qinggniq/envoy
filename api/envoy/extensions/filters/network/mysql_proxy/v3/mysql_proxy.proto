syntax = "proto3";

package envoy.extensions.filters.network.mysql_proxy.v3;

import "envoy/config/core/v3/base.proto";

import "udpa/annotations/sensitive.proto";
import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.network.mysql_proxy.v3";
option java_outer_classname = "MysqlProxyProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: MySQL proxy]
// MySQL Proxy :ref:`configuration overview <config_network_filters_mysql_proxy>`.
// [#extension: envoy.filters.network.mysql_proxy]

// Auth information of MySQL.
message AuthInfo {
  config.core.v3.DataSource username = 1 [(udpa.annotations.sensitive) = true];

  config.core.v3.DataSource password = 2 [(udpa.annotations.sensitive) = true];
}

// [#next-free-field: 6]
message MySQLProxy {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.config.filter.network.mysql_proxy.v1alpha1.MySQLProxy";

  message DatabaseRoutes {
    message Route {
      // String database name that must exact match with client connection db name. https://dev.mysql.com/doc/refman/5.7/en/identifier-length.html
      string database = 1 [(validate.rules).string = {max_bytes: 64}];

      // Upstream cluster to forward the command to.
      string cluster = 2 [(validate.rules).string = {min_len: 1}];
    }

    // [#not-implemented-hide:] List of database routes.
    repeated Route routes = 1;

    // Optional catch-all route to forward connection that not specific database name.
    Route catch_all_route = 2;
  }

  // The human readable prefix to use when emitting :ref:`statistics
  // <config_network_filters_mysql_proxy_stats>`.
  string stat_prefix = 1 [(validate.rules).string = {min_len: 1}];

  // [#not-implemented-hide:] The optional path to use for writing MySQL access logs.
  // If the access log field is empty, access logs will not be written.
  string access_log = 2;

  // [#not-implemented-hide:] enable manage MySQL protocol at proxy. Default is false.
  // * When enable_manage_protocol is true, MySQL filter is a terminal filter, it's config should put at the last of filter chain, in the same time, MySQLProtocolOptions should be set at corresponding config of cluster for connecting to upstream database.
  // * When enable_manage_protocol is false, MySQL filter is not a terminal filter, it's config can not put at the last of filter chain, the routes and downstream_auth_info fields will be ignore.
  bool enable_manage_protocol = 3;

  // List of **unique** db name used to separate connections from different database to different
  // clusters.
  //
  // Example:
  //
  // .. code-block:: yaml
  //  database_routes:
  //      routes:
  //      - database: "database_a"
  //        cluster: "cluster_a"
  //      - database: "database_b"
  //        cluster: "cluster_b"
  //      catch_all_route:
  //      - cluster: "catch_all_cluster"
  //
  // When using the above routes, the following connect data source names would be sent to:
  //
  // * ``jdbc:mysql://host1:9001/database_a`` would sent command to cluster_a.
  // * ``jdbc:mysql://host1:9001/database_c`` will return ER_ER_BAD_DB_ERROR.
  // * ``jdbc:mysql://host1:9001/`` will send command to catch_all_cluster.
  DatabaseRoutes database_routes = 4;

  // Downstream client username/password.
  // * If the username/password is not match, then ER_ACCESS_DENIED_ERROR will return;
  AuthInfo downstream_auth_info = 5;
}

// MySQLProtocolOptions specifies MySQL upstream protocol options. This object is used in
// :ref:`typed_extension_protocol_options<envoy_api_field_config.cluster.v3.Cluster.typed_extension_protocol_options>`,
// keyed by the name `envoy.filters.network.mysql_proxy`.
message MySQLProtocolOptions {
  // Upstream database username/password.
  AuthInfo upstream_auth_info = 1 [(validate.rules).message = {required: true}];
}
